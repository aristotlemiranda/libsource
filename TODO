resolvers[tableName.toLowerCase()] = async (args) => {
      console.log(`Fetching ${tableName.toLowerCase()} with args:`, args);
      try {
        const model = sequelize.define(tableName, tableInfo, {
          tableName,
          timestamps: false,
          modelName: tableName,
        });


        const query = {};
        args.searchByIds.keys.map(key => {
          const modelKey = model.primaryKeys[key.columnName];

          if(modelKey) {
            console.log("is a primaryKey=", modelKey.primaryKey);
            console.log("is a type=", modelKey.type);
            query[key.columnName] = uuidToBuffer(key.value, modelKey.type);
          }else {
            throw new Error(`${key.columnName} is not a primary key`);
          }
        });

      
        const result = await model.findOne({where: query});

        // Convert binary fields to UUID strings
        const updatedResults = result;
        let updatedItem = updatedResults.dataValues; // Create a copy to modify
        updatedItem = formatData(updatedItem, tableInfo);
        console.log(`Result for ${tableName.toLowerCase()}:`, updatedResults);
        return updatedResults;
      } catch (error) {
        console.error(`Error fetching ${tableName.toLowerCase()}:`, error);
        throw new Error(`Failed to fetch ${tableName.toLowerCase()}. Reason: ${error}`);
      }
    };




${tableName.toLowerCase()}(searchByIds: FindByIdInput!): ${tableName}


 input PrimaryKeyInput{
      columnName: String!,
      value: String!
    }

    input FindByIdInput {
      keys: [PrimaryKeyInput]!
    }
